from dash import dcc, html, Input, Output, State
import lightgbm as lgb
import numpy as np
from server import server
import dash

# –°—Ç–≤–æ—Ä—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π Dash –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫
predict_app = dash.Dash(__name__, server=server, url_base_pathname="/predict/", suppress_callback_exceptions=True)

# –§–µ–π–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è
X_train = np.array([[1], [2], [3], [4], [5]])
y_train = np.array([10, 20, 30, 40, 50])
model = lgb.LGBMRegressor()
model.fit(X_train, y_train)

# üîπ **Layout —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –±–µ–∑ inline-—Å—Ç–∏–ª—ñ–≤**
layout = html.Div([
    html.H1("–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω—å", className="page-title"),
    dcc.Input(id="input-value", type="number", placeholder="–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ", className="input-field"),
    html.Button("–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏", id="predict-button", n_clicks=0, className="btn-primary"),
    html.Div(id="output-prediction", className="output-box")
])

# üîπ **Callback –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è**
@predict_app.callback(
    Output("output-prediction", "children"),
    Input("predict-button", "n_clicks"),
    State("input-value", "value")
)
def predict(n_clicks, value):
    if n_clicks > 0 and value is not None:
        prediction = model.predict(np.array([[value]]))
        return f"–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è: {prediction[0]:.2f}"
    return ""

predict_app.layout = layout